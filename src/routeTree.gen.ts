/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as DashboardLayoutRouteImport } from "./routes/dashboard/layout";
import { Route as publicLayoutRouteImport } from "./routes/(public)/layout";
import { Route as authLayoutRouteImport } from "./routes/(auth)/layout";
import { Route as DashboardIndexRouteImport } from "./routes/dashboard/index";
import { Route as publicIndexRouteImport } from "./routes/(public)/index";
import { Route as publicUsesRouteImport } from "./routes/(public)/uses";
import { Route as publicStatsRouteImport } from "./routes/(public)/stats";
import { Route as publicProfileRouteImport } from "./routes/(public)/profile";
import { Route as publicGuestbookRouteImport } from "./routes/(public)/guestbook";
import { Route as publicAboutRouteImport } from "./routes/(public)/about";
import { Route as authSigninRouteImport } from "./routes/(auth)/signin";
import { Route as DashboardUsersIndexRouteImport } from "./routes/dashboard/users/index";
import { Route as DashboardSnippetsIndexRouteImport } from "./routes/dashboard/snippets/index";
import { Route as DashboardProjectsIndexRouteImport } from "./routes/dashboard/projects/index";
import { Route as DashboardExperiencesIndexRouteImport } from "./routes/dashboard/experiences/index";
import { Route as DashboardBlogIndexRouteImport } from "./routes/dashboard/blog/index";
import { Route as ApiContactIndexRouteImport } from "./routes/api/contact/index";
import { Route as ApiChatIndexRouteImport } from "./routes/api/chat/index";
import { Route as publicSnippetsIndexRouteImport } from "./routes/(public)/snippets/index";
import { Route as publicProjectsIndexRouteImport } from "./routes/(public)/projects/index";
import { Route as publicBookmarksIndexRouteImport } from "./routes/(public)/bookmarks/index";
import { Route as publicBlogIndexRouteImport } from "./routes/(public)/blog/index";
import { Route as DashboardSnippetsCreateRouteImport } from "./routes/dashboard/snippets/create";
import { Route as DashboardProjectsCreateRouteImport } from "./routes/dashboard/projects/create";
import { Route as DashboardExperiencesCreateRouteImport } from "./routes/dashboard/experiences/create";
import { Route as DashboardBlogCreateRouteImport } from "./routes/dashboard/blog/create";
import { Route as ApiTrpcSplatRouteImport } from "./routes/api/trpc/$";
import { Route as ApiAuthSplatRouteImport } from "./routes/api/auth/$";
import { Route as publicSnippetsSnippetIdRouteImport } from "./routes/(public)/snippets/$snippetId";
import { Route as publicProjectsProjectIdRouteImport } from "./routes/(public)/projects/$projectId";
import { Route as publicBookmarksBookmarkIdRouteImport } from "./routes/(public)/bookmarks/$bookmarkId";
import { Route as publicBlogArticleIdRouteImport } from "./routes/(public)/blog/$articleId";
import { Route as ApiStatsGithubIndexRouteImport } from "./routes/api/stats/github/index";
import { Route as DashboardSnippetsSnippetIdEditRouteImport } from "./routes/dashboard/snippets/$snippetId.edit";
import { Route as DashboardProjectsProjectIdEditRouteImport } from "./routes/dashboard/projects/$projectId.edit";
import { Route as DashboardExperiencesExperienceIdEditRouteImport } from "./routes/dashboard/experiences/$experienceId.edit";
import { Route as DashboardBlogArticleIdEditRouteImport } from "./routes/dashboard/blog/$articleId.edit";
import { Route as ApiStatsGithubActivityRouteImport } from "./routes/api/stats/github/activity";

const DashboardLayoutRoute = DashboardLayoutRouteImport.update({
  id: "/dashboard",
  path: "/dashboard",
  getParentRoute: () => rootRouteImport,
} as any);
const publicLayoutRoute = publicLayoutRouteImport.update({
  id: "/(public)",
  getParentRoute: () => rootRouteImport,
} as any);
const authLayoutRoute = authLayoutRouteImport.update({
  id: "/(auth)",
  getParentRoute: () => rootRouteImport,
} as any);
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => DashboardLayoutRoute,
} as any);
const publicIndexRoute = publicIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => publicLayoutRoute,
} as any);
const publicUsesRoute = publicUsesRouteImport.update({
  id: "/uses",
  path: "/uses",
  getParentRoute: () => publicLayoutRoute,
} as any);
const publicStatsRoute = publicStatsRouteImport.update({
  id: "/stats",
  path: "/stats",
  getParentRoute: () => publicLayoutRoute,
} as any);
const publicProfileRoute = publicProfileRouteImport.update({
  id: "/profile",
  path: "/profile",
  getParentRoute: () => publicLayoutRoute,
} as any);
const publicGuestbookRoute = publicGuestbookRouteImport.update({
  id: "/guestbook",
  path: "/guestbook",
  getParentRoute: () => publicLayoutRoute,
} as any);
const publicAboutRoute = publicAboutRouteImport.update({
  id: "/about",
  path: "/about",
  getParentRoute: () => publicLayoutRoute,
} as any);
const authSigninRoute = authSigninRouteImport.update({
  id: "/signin",
  path: "/signin",
  getParentRoute: () => authLayoutRoute,
} as any);
const DashboardUsersIndexRoute = DashboardUsersIndexRouteImport.update({
  id: "/users/",
  path: "/users/",
  getParentRoute: () => DashboardLayoutRoute,
} as any);
const DashboardSnippetsIndexRoute = DashboardSnippetsIndexRouteImport.update({
  id: "/snippets/",
  path: "/snippets/",
  getParentRoute: () => DashboardLayoutRoute,
} as any);
const DashboardProjectsIndexRoute = DashboardProjectsIndexRouteImport.update({
  id: "/projects/",
  path: "/projects/",
  getParentRoute: () => DashboardLayoutRoute,
} as any);
const DashboardExperiencesIndexRoute =
  DashboardExperiencesIndexRouteImport.update({
    id: "/experiences/",
    path: "/experiences/",
    getParentRoute: () => DashboardLayoutRoute,
  } as any);
const DashboardBlogIndexRoute = DashboardBlogIndexRouteImport.update({
  id: "/blog/",
  path: "/blog/",
  getParentRoute: () => DashboardLayoutRoute,
} as any);
const ApiContactIndexRoute = ApiContactIndexRouteImport.update({
  id: "/api/contact/",
  path: "/api/contact/",
  getParentRoute: () => rootRouteImport,
} as any);
const ApiChatIndexRoute = ApiChatIndexRouteImport.update({
  id: "/api/chat/",
  path: "/api/chat/",
  getParentRoute: () => rootRouteImport,
} as any);
const publicSnippetsIndexRoute = publicSnippetsIndexRouteImport.update({
  id: "/snippets/",
  path: "/snippets/",
  getParentRoute: () => publicLayoutRoute,
} as any);
const publicProjectsIndexRoute = publicProjectsIndexRouteImport.update({
  id: "/projects/",
  path: "/projects/",
  getParentRoute: () => publicLayoutRoute,
} as any);
const publicBookmarksIndexRoute = publicBookmarksIndexRouteImport.update({
  id: "/bookmarks/",
  path: "/bookmarks/",
  getParentRoute: () => publicLayoutRoute,
} as any);
const publicBlogIndexRoute = publicBlogIndexRouteImport.update({
  id: "/blog/",
  path: "/blog/",
  getParentRoute: () => publicLayoutRoute,
} as any);
const DashboardSnippetsCreateRoute = DashboardSnippetsCreateRouteImport.update({
  id: "/snippets/create",
  path: "/snippets/create",
  getParentRoute: () => DashboardLayoutRoute,
} as any);
const DashboardProjectsCreateRoute = DashboardProjectsCreateRouteImport.update({
  id: "/projects/create",
  path: "/projects/create",
  getParentRoute: () => DashboardLayoutRoute,
} as any);
const DashboardExperiencesCreateRoute =
  DashboardExperiencesCreateRouteImport.update({
    id: "/experiences/create",
    path: "/experiences/create",
    getParentRoute: () => DashboardLayoutRoute,
  } as any);
const DashboardBlogCreateRoute = DashboardBlogCreateRouteImport.update({
  id: "/blog/create",
  path: "/blog/create",
  getParentRoute: () => DashboardLayoutRoute,
} as any);
const ApiTrpcSplatRoute = ApiTrpcSplatRouteImport.update({
  id: "/api/trpc/$",
  path: "/api/trpc/$",
  getParentRoute: () => rootRouteImport,
} as any);
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: "/api/auth/$",
  path: "/api/auth/$",
  getParentRoute: () => rootRouteImport,
} as any);
const publicSnippetsSnippetIdRoute = publicSnippetsSnippetIdRouteImport.update({
  id: "/snippets/$snippetId",
  path: "/snippets/$snippetId",
  getParentRoute: () => publicLayoutRoute,
} as any);
const publicProjectsProjectIdRoute = publicProjectsProjectIdRouteImport.update({
  id: "/projects/$projectId",
  path: "/projects/$projectId",
  getParentRoute: () => publicLayoutRoute,
} as any);
const publicBookmarksBookmarkIdRoute =
  publicBookmarksBookmarkIdRouteImport.update({
    id: "/bookmarks/$bookmarkId",
    path: "/bookmarks/$bookmarkId",
    getParentRoute: () => publicLayoutRoute,
  } as any);
const publicBlogArticleIdRoute = publicBlogArticleIdRouteImport.update({
  id: "/blog/$articleId",
  path: "/blog/$articleId",
  getParentRoute: () => publicLayoutRoute,
} as any);
const ApiStatsGithubIndexRoute = ApiStatsGithubIndexRouteImport.update({
  id: "/api/stats/github/",
  path: "/api/stats/github/",
  getParentRoute: () => rootRouteImport,
} as any);
const DashboardSnippetsSnippetIdEditRoute =
  DashboardSnippetsSnippetIdEditRouteImport.update({
    id: "/snippets/$snippetId/edit",
    path: "/snippets/$snippetId/edit",
    getParentRoute: () => DashboardLayoutRoute,
  } as any);
const DashboardProjectsProjectIdEditRoute =
  DashboardProjectsProjectIdEditRouteImport.update({
    id: "/projects/$projectId/edit",
    path: "/projects/$projectId/edit",
    getParentRoute: () => DashboardLayoutRoute,
  } as any);
const DashboardExperiencesExperienceIdEditRoute =
  DashboardExperiencesExperienceIdEditRouteImport.update({
    id: "/experiences/$experienceId/edit",
    path: "/experiences/$experienceId/edit",
    getParentRoute: () => DashboardLayoutRoute,
  } as any);
const DashboardBlogArticleIdEditRoute =
  DashboardBlogArticleIdEditRouteImport.update({
    id: "/blog/$articleId/edit",
    path: "/blog/$articleId/edit",
    getParentRoute: () => DashboardLayoutRoute,
  } as any);
const ApiStatsGithubActivityRoute = ApiStatsGithubActivityRouteImport.update({
  id: "/api/stats/github/activity",
  path: "/api/stats/github/activity",
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof publicIndexRoute;
  "/dashboard": typeof DashboardLayoutRouteWithChildren;
  "/signin": typeof authSigninRoute;
  "/about": typeof publicAboutRoute;
  "/guestbook": typeof publicGuestbookRoute;
  "/profile": typeof publicProfileRoute;
  "/stats": typeof publicStatsRoute;
  "/uses": typeof publicUsesRoute;
  "/dashboard/": typeof DashboardIndexRoute;
  "/blog/$articleId": typeof publicBlogArticleIdRoute;
  "/bookmarks/$bookmarkId": typeof publicBookmarksBookmarkIdRoute;
  "/projects/$projectId": typeof publicProjectsProjectIdRoute;
  "/snippets/$snippetId": typeof publicSnippetsSnippetIdRoute;
  "/api/auth/$": typeof ApiAuthSplatRoute;
  "/api/trpc/$": typeof ApiTrpcSplatRoute;
  "/dashboard/blog/create": typeof DashboardBlogCreateRoute;
  "/dashboard/experiences/create": typeof DashboardExperiencesCreateRoute;
  "/dashboard/projects/create": typeof DashboardProjectsCreateRoute;
  "/dashboard/snippets/create": typeof DashboardSnippetsCreateRoute;
  "/blog": typeof publicBlogIndexRoute;
  "/bookmarks": typeof publicBookmarksIndexRoute;
  "/projects": typeof publicProjectsIndexRoute;
  "/snippets": typeof publicSnippetsIndexRoute;
  "/api/chat": typeof ApiChatIndexRoute;
  "/api/contact": typeof ApiContactIndexRoute;
  "/dashboard/blog": typeof DashboardBlogIndexRoute;
  "/dashboard/experiences": typeof DashboardExperiencesIndexRoute;
  "/dashboard/projects": typeof DashboardProjectsIndexRoute;
  "/dashboard/snippets": typeof DashboardSnippetsIndexRoute;
  "/dashboard/users": typeof DashboardUsersIndexRoute;
  "/api/stats/github/activity": typeof ApiStatsGithubActivityRoute;
  "/dashboard/blog/$articleId/edit": typeof DashboardBlogArticleIdEditRoute;
  "/dashboard/experiences/$experienceId/edit": typeof DashboardExperiencesExperienceIdEditRoute;
  "/dashboard/projects/$projectId/edit": typeof DashboardProjectsProjectIdEditRoute;
  "/dashboard/snippets/$snippetId/edit": typeof DashboardSnippetsSnippetIdEditRoute;
  "/api/stats/github": typeof ApiStatsGithubIndexRoute;
}
export interface FileRoutesByTo {
  "/": typeof publicIndexRoute;
  "/signin": typeof authSigninRoute;
  "/about": typeof publicAboutRoute;
  "/guestbook": typeof publicGuestbookRoute;
  "/profile": typeof publicProfileRoute;
  "/stats": typeof publicStatsRoute;
  "/uses": typeof publicUsesRoute;
  "/dashboard": typeof DashboardIndexRoute;
  "/blog/$articleId": typeof publicBlogArticleIdRoute;
  "/bookmarks/$bookmarkId": typeof publicBookmarksBookmarkIdRoute;
  "/projects/$projectId": typeof publicProjectsProjectIdRoute;
  "/snippets/$snippetId": typeof publicSnippetsSnippetIdRoute;
  "/api/auth/$": typeof ApiAuthSplatRoute;
  "/api/trpc/$": typeof ApiTrpcSplatRoute;
  "/dashboard/blog/create": typeof DashboardBlogCreateRoute;
  "/dashboard/experiences/create": typeof DashboardExperiencesCreateRoute;
  "/dashboard/projects/create": typeof DashboardProjectsCreateRoute;
  "/dashboard/snippets/create": typeof DashboardSnippetsCreateRoute;
  "/blog": typeof publicBlogIndexRoute;
  "/bookmarks": typeof publicBookmarksIndexRoute;
  "/projects": typeof publicProjectsIndexRoute;
  "/snippets": typeof publicSnippetsIndexRoute;
  "/api/chat": typeof ApiChatIndexRoute;
  "/api/contact": typeof ApiContactIndexRoute;
  "/dashboard/blog": typeof DashboardBlogIndexRoute;
  "/dashboard/experiences": typeof DashboardExperiencesIndexRoute;
  "/dashboard/projects": typeof DashboardProjectsIndexRoute;
  "/dashboard/snippets": typeof DashboardSnippetsIndexRoute;
  "/dashboard/users": typeof DashboardUsersIndexRoute;
  "/api/stats/github/activity": typeof ApiStatsGithubActivityRoute;
  "/dashboard/blog/$articleId/edit": typeof DashboardBlogArticleIdEditRoute;
  "/dashboard/experiences/$experienceId/edit": typeof DashboardExperiencesExperienceIdEditRoute;
  "/dashboard/projects/$projectId/edit": typeof DashboardProjectsProjectIdEditRoute;
  "/dashboard/snippets/$snippetId/edit": typeof DashboardSnippetsSnippetIdEditRoute;
  "/api/stats/github": typeof ApiStatsGithubIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/(auth)": typeof authLayoutRouteWithChildren;
  "/(public)": typeof publicLayoutRouteWithChildren;
  "/dashboard": typeof DashboardLayoutRouteWithChildren;
  "/(auth)/signin": typeof authSigninRoute;
  "/(public)/about": typeof publicAboutRoute;
  "/(public)/guestbook": typeof publicGuestbookRoute;
  "/(public)/profile": typeof publicProfileRoute;
  "/(public)/stats": typeof publicStatsRoute;
  "/(public)/uses": typeof publicUsesRoute;
  "/(public)/": typeof publicIndexRoute;
  "/dashboard/": typeof DashboardIndexRoute;
  "/(public)/blog/$articleId": typeof publicBlogArticleIdRoute;
  "/(public)/bookmarks/$bookmarkId": typeof publicBookmarksBookmarkIdRoute;
  "/(public)/projects/$projectId": typeof publicProjectsProjectIdRoute;
  "/(public)/snippets/$snippetId": typeof publicSnippetsSnippetIdRoute;
  "/api/auth/$": typeof ApiAuthSplatRoute;
  "/api/trpc/$": typeof ApiTrpcSplatRoute;
  "/dashboard/blog/create": typeof DashboardBlogCreateRoute;
  "/dashboard/experiences/create": typeof DashboardExperiencesCreateRoute;
  "/dashboard/projects/create": typeof DashboardProjectsCreateRoute;
  "/dashboard/snippets/create": typeof DashboardSnippetsCreateRoute;
  "/(public)/blog/": typeof publicBlogIndexRoute;
  "/(public)/bookmarks/": typeof publicBookmarksIndexRoute;
  "/(public)/projects/": typeof publicProjectsIndexRoute;
  "/(public)/snippets/": typeof publicSnippetsIndexRoute;
  "/api/chat/": typeof ApiChatIndexRoute;
  "/api/contact/": typeof ApiContactIndexRoute;
  "/dashboard/blog/": typeof DashboardBlogIndexRoute;
  "/dashboard/experiences/": typeof DashboardExperiencesIndexRoute;
  "/dashboard/projects/": typeof DashboardProjectsIndexRoute;
  "/dashboard/snippets/": typeof DashboardSnippetsIndexRoute;
  "/dashboard/users/": typeof DashboardUsersIndexRoute;
  "/api/stats/github/activity": typeof ApiStatsGithubActivityRoute;
  "/dashboard/blog/$articleId/edit": typeof DashboardBlogArticleIdEditRoute;
  "/dashboard/experiences/$experienceId/edit": typeof DashboardExperiencesExperienceIdEditRoute;
  "/dashboard/projects/$projectId/edit": typeof DashboardProjectsProjectIdEditRoute;
  "/dashboard/snippets/$snippetId/edit": typeof DashboardSnippetsSnippetIdEditRoute;
  "/api/stats/github/": typeof ApiStatsGithubIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/dashboard"
    | "/signin"
    | "/about"
    | "/guestbook"
    | "/profile"
    | "/stats"
    | "/uses"
    | "/dashboard/"
    | "/blog/$articleId"
    | "/bookmarks/$bookmarkId"
    | "/projects/$projectId"
    | "/snippets/$snippetId"
    | "/api/auth/$"
    | "/api/trpc/$"
    | "/dashboard/blog/create"
    | "/dashboard/experiences/create"
    | "/dashboard/projects/create"
    | "/dashboard/snippets/create"
    | "/blog"
    | "/bookmarks"
    | "/projects"
    | "/snippets"
    | "/api/chat"
    | "/api/contact"
    | "/dashboard/blog"
    | "/dashboard/experiences"
    | "/dashboard/projects"
    | "/dashboard/snippets"
    | "/dashboard/users"
    | "/api/stats/github/activity"
    | "/dashboard/blog/$articleId/edit"
    | "/dashboard/experiences/$experienceId/edit"
    | "/dashboard/projects/$projectId/edit"
    | "/dashboard/snippets/$snippetId/edit"
    | "/api/stats/github";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/signin"
    | "/about"
    | "/guestbook"
    | "/profile"
    | "/stats"
    | "/uses"
    | "/dashboard"
    | "/blog/$articleId"
    | "/bookmarks/$bookmarkId"
    | "/projects/$projectId"
    | "/snippets/$snippetId"
    | "/api/auth/$"
    | "/api/trpc/$"
    | "/dashboard/blog/create"
    | "/dashboard/experiences/create"
    | "/dashboard/projects/create"
    | "/dashboard/snippets/create"
    | "/blog"
    | "/bookmarks"
    | "/projects"
    | "/snippets"
    | "/api/chat"
    | "/api/contact"
    | "/dashboard/blog"
    | "/dashboard/experiences"
    | "/dashboard/projects"
    | "/dashboard/snippets"
    | "/dashboard/users"
    | "/api/stats/github/activity"
    | "/dashboard/blog/$articleId/edit"
    | "/dashboard/experiences/$experienceId/edit"
    | "/dashboard/projects/$projectId/edit"
    | "/dashboard/snippets/$snippetId/edit"
    | "/api/stats/github";
  id:
    | "__root__"
    | "/(auth)"
    | "/(public)"
    | "/dashboard"
    | "/(auth)/signin"
    | "/(public)/about"
    | "/(public)/guestbook"
    | "/(public)/profile"
    | "/(public)/stats"
    | "/(public)/uses"
    | "/(public)/"
    | "/dashboard/"
    | "/(public)/blog/$articleId"
    | "/(public)/bookmarks/$bookmarkId"
    | "/(public)/projects/$projectId"
    | "/(public)/snippets/$snippetId"
    | "/api/auth/$"
    | "/api/trpc/$"
    | "/dashboard/blog/create"
    | "/dashboard/experiences/create"
    | "/dashboard/projects/create"
    | "/dashboard/snippets/create"
    | "/(public)/blog/"
    | "/(public)/bookmarks/"
    | "/(public)/projects/"
    | "/(public)/snippets/"
    | "/api/chat/"
    | "/api/contact/"
    | "/dashboard/blog/"
    | "/dashboard/experiences/"
    | "/dashboard/projects/"
    | "/dashboard/snippets/"
    | "/dashboard/users/"
    | "/api/stats/github/activity"
    | "/dashboard/blog/$articleId/edit"
    | "/dashboard/experiences/$experienceId/edit"
    | "/dashboard/projects/$projectId/edit"
    | "/dashboard/snippets/$snippetId/edit"
    | "/api/stats/github/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  authLayoutRoute: typeof authLayoutRouteWithChildren;
  publicLayoutRoute: typeof publicLayoutRouteWithChildren;
  DashboardLayoutRoute: typeof DashboardLayoutRouteWithChildren;
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute;
  ApiTrpcSplatRoute: typeof ApiTrpcSplatRoute;
  ApiChatIndexRoute: typeof ApiChatIndexRoute;
  ApiContactIndexRoute: typeof ApiContactIndexRoute;
  ApiStatsGithubActivityRoute: typeof ApiStatsGithubActivityRoute;
  ApiStatsGithubIndexRoute: typeof ApiStatsGithubIndexRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/dashboard": {
      id: "/dashboard";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof DashboardLayoutRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/(public)": {
      id: "/(public)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof publicLayoutRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/(auth)": {
      id: "/(auth)";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof authLayoutRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/dashboard/": {
      id: "/dashboard/";
      path: "/";
      fullPath: "/dashboard/";
      preLoaderRoute: typeof DashboardIndexRouteImport;
      parentRoute: typeof DashboardLayoutRoute;
    };
    "/(public)/": {
      id: "/(public)/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof publicIndexRouteImport;
      parentRoute: typeof publicLayoutRoute;
    };
    "/(public)/uses": {
      id: "/(public)/uses";
      path: "/uses";
      fullPath: "/uses";
      preLoaderRoute: typeof publicUsesRouteImport;
      parentRoute: typeof publicLayoutRoute;
    };
    "/(public)/stats": {
      id: "/(public)/stats";
      path: "/stats";
      fullPath: "/stats";
      preLoaderRoute: typeof publicStatsRouteImport;
      parentRoute: typeof publicLayoutRoute;
    };
    "/(public)/profile": {
      id: "/(public)/profile";
      path: "/profile";
      fullPath: "/profile";
      preLoaderRoute: typeof publicProfileRouteImport;
      parentRoute: typeof publicLayoutRoute;
    };
    "/(public)/guestbook": {
      id: "/(public)/guestbook";
      path: "/guestbook";
      fullPath: "/guestbook";
      preLoaderRoute: typeof publicGuestbookRouteImport;
      parentRoute: typeof publicLayoutRoute;
    };
    "/(public)/about": {
      id: "/(public)/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof publicAboutRouteImport;
      parentRoute: typeof publicLayoutRoute;
    };
    "/(auth)/signin": {
      id: "/(auth)/signin";
      path: "/signin";
      fullPath: "/signin";
      preLoaderRoute: typeof authSigninRouteImport;
      parentRoute: typeof authLayoutRoute;
    };
    "/dashboard/users/": {
      id: "/dashboard/users/";
      path: "/users";
      fullPath: "/dashboard/users";
      preLoaderRoute: typeof DashboardUsersIndexRouteImport;
      parentRoute: typeof DashboardLayoutRoute;
    };
    "/dashboard/snippets/": {
      id: "/dashboard/snippets/";
      path: "/snippets";
      fullPath: "/dashboard/snippets";
      preLoaderRoute: typeof DashboardSnippetsIndexRouteImport;
      parentRoute: typeof DashboardLayoutRoute;
    };
    "/dashboard/projects/": {
      id: "/dashboard/projects/";
      path: "/projects";
      fullPath: "/dashboard/projects";
      preLoaderRoute: typeof DashboardProjectsIndexRouteImport;
      parentRoute: typeof DashboardLayoutRoute;
    };
    "/dashboard/experiences/": {
      id: "/dashboard/experiences/";
      path: "/experiences";
      fullPath: "/dashboard/experiences";
      preLoaderRoute: typeof DashboardExperiencesIndexRouteImport;
      parentRoute: typeof DashboardLayoutRoute;
    };
    "/dashboard/blog/": {
      id: "/dashboard/blog/";
      path: "/blog";
      fullPath: "/dashboard/blog";
      preLoaderRoute: typeof DashboardBlogIndexRouteImport;
      parentRoute: typeof DashboardLayoutRoute;
    };
    "/api/contact/": {
      id: "/api/contact/";
      path: "/api/contact";
      fullPath: "/api/contact";
      preLoaderRoute: typeof ApiContactIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/api/chat/": {
      id: "/api/chat/";
      path: "/api/chat";
      fullPath: "/api/chat";
      preLoaderRoute: typeof ApiChatIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/(public)/snippets/": {
      id: "/(public)/snippets/";
      path: "/snippets";
      fullPath: "/snippets";
      preLoaderRoute: typeof publicSnippetsIndexRouteImport;
      parentRoute: typeof publicLayoutRoute;
    };
    "/(public)/projects/": {
      id: "/(public)/projects/";
      path: "/projects";
      fullPath: "/projects";
      preLoaderRoute: typeof publicProjectsIndexRouteImport;
      parentRoute: typeof publicLayoutRoute;
    };
    "/(public)/bookmarks/": {
      id: "/(public)/bookmarks/";
      path: "/bookmarks";
      fullPath: "/bookmarks";
      preLoaderRoute: typeof publicBookmarksIndexRouteImport;
      parentRoute: typeof publicLayoutRoute;
    };
    "/(public)/blog/": {
      id: "/(public)/blog/";
      path: "/blog";
      fullPath: "/blog";
      preLoaderRoute: typeof publicBlogIndexRouteImport;
      parentRoute: typeof publicLayoutRoute;
    };
    "/dashboard/snippets/create": {
      id: "/dashboard/snippets/create";
      path: "/snippets/create";
      fullPath: "/dashboard/snippets/create";
      preLoaderRoute: typeof DashboardSnippetsCreateRouteImport;
      parentRoute: typeof DashboardLayoutRoute;
    };
    "/dashboard/projects/create": {
      id: "/dashboard/projects/create";
      path: "/projects/create";
      fullPath: "/dashboard/projects/create";
      preLoaderRoute: typeof DashboardProjectsCreateRouteImport;
      parentRoute: typeof DashboardLayoutRoute;
    };
    "/dashboard/experiences/create": {
      id: "/dashboard/experiences/create";
      path: "/experiences/create";
      fullPath: "/dashboard/experiences/create";
      preLoaderRoute: typeof DashboardExperiencesCreateRouteImport;
      parentRoute: typeof DashboardLayoutRoute;
    };
    "/dashboard/blog/create": {
      id: "/dashboard/blog/create";
      path: "/blog/create";
      fullPath: "/dashboard/blog/create";
      preLoaderRoute: typeof DashboardBlogCreateRouteImport;
      parentRoute: typeof DashboardLayoutRoute;
    };
    "/api/trpc/$": {
      id: "/api/trpc/$";
      path: "/api/trpc/$";
      fullPath: "/api/trpc/$";
      preLoaderRoute: typeof ApiTrpcSplatRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/api/auth/$": {
      id: "/api/auth/$";
      path: "/api/auth/$";
      fullPath: "/api/auth/$";
      preLoaderRoute: typeof ApiAuthSplatRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/(public)/snippets/$snippetId": {
      id: "/(public)/snippets/$snippetId";
      path: "/snippets/$snippetId";
      fullPath: "/snippets/$snippetId";
      preLoaderRoute: typeof publicSnippetsSnippetIdRouteImport;
      parentRoute: typeof publicLayoutRoute;
    };
    "/(public)/projects/$projectId": {
      id: "/(public)/projects/$projectId";
      path: "/projects/$projectId";
      fullPath: "/projects/$projectId";
      preLoaderRoute: typeof publicProjectsProjectIdRouteImport;
      parentRoute: typeof publicLayoutRoute;
    };
    "/(public)/bookmarks/$bookmarkId": {
      id: "/(public)/bookmarks/$bookmarkId";
      path: "/bookmarks/$bookmarkId";
      fullPath: "/bookmarks/$bookmarkId";
      preLoaderRoute: typeof publicBookmarksBookmarkIdRouteImport;
      parentRoute: typeof publicLayoutRoute;
    };
    "/(public)/blog/$articleId": {
      id: "/(public)/blog/$articleId";
      path: "/blog/$articleId";
      fullPath: "/blog/$articleId";
      preLoaderRoute: typeof publicBlogArticleIdRouteImport;
      parentRoute: typeof publicLayoutRoute;
    };
    "/api/stats/github/": {
      id: "/api/stats/github/";
      path: "/api/stats/github";
      fullPath: "/api/stats/github";
      preLoaderRoute: typeof ApiStatsGithubIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/dashboard/snippets/$snippetId/edit": {
      id: "/dashboard/snippets/$snippetId/edit";
      path: "/snippets/$snippetId/edit";
      fullPath: "/dashboard/snippets/$snippetId/edit";
      preLoaderRoute: typeof DashboardSnippetsSnippetIdEditRouteImport;
      parentRoute: typeof DashboardLayoutRoute;
    };
    "/dashboard/projects/$projectId/edit": {
      id: "/dashboard/projects/$projectId/edit";
      path: "/projects/$projectId/edit";
      fullPath: "/dashboard/projects/$projectId/edit";
      preLoaderRoute: typeof DashboardProjectsProjectIdEditRouteImport;
      parentRoute: typeof DashboardLayoutRoute;
    };
    "/dashboard/experiences/$experienceId/edit": {
      id: "/dashboard/experiences/$experienceId/edit";
      path: "/experiences/$experienceId/edit";
      fullPath: "/dashboard/experiences/$experienceId/edit";
      preLoaderRoute: typeof DashboardExperiencesExperienceIdEditRouteImport;
      parentRoute: typeof DashboardLayoutRoute;
    };
    "/dashboard/blog/$articleId/edit": {
      id: "/dashboard/blog/$articleId/edit";
      path: "/blog/$articleId/edit";
      fullPath: "/dashboard/blog/$articleId/edit";
      preLoaderRoute: typeof DashboardBlogArticleIdEditRouteImport;
      parentRoute: typeof DashboardLayoutRoute;
    };
    "/api/stats/github/activity": {
      id: "/api/stats/github/activity";
      path: "/api/stats/github/activity";
      fullPath: "/api/stats/github/activity";
      preLoaderRoute: typeof ApiStatsGithubActivityRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

interface authLayoutRouteChildren {
  authSigninRoute: typeof authSigninRoute;
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authSigninRoute: authSigninRoute,
};

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
);

interface publicLayoutRouteChildren {
  publicAboutRoute: typeof publicAboutRoute;
  publicGuestbookRoute: typeof publicGuestbookRoute;
  publicProfileRoute: typeof publicProfileRoute;
  publicStatsRoute: typeof publicStatsRoute;
  publicUsesRoute: typeof publicUsesRoute;
  publicIndexRoute: typeof publicIndexRoute;
  publicBlogArticleIdRoute: typeof publicBlogArticleIdRoute;
  publicBookmarksBookmarkIdRoute: typeof publicBookmarksBookmarkIdRoute;
  publicProjectsProjectIdRoute: typeof publicProjectsProjectIdRoute;
  publicSnippetsSnippetIdRoute: typeof publicSnippetsSnippetIdRoute;
  publicBlogIndexRoute: typeof publicBlogIndexRoute;
  publicBookmarksIndexRoute: typeof publicBookmarksIndexRoute;
  publicProjectsIndexRoute: typeof publicProjectsIndexRoute;
  publicSnippetsIndexRoute: typeof publicSnippetsIndexRoute;
}

const publicLayoutRouteChildren: publicLayoutRouteChildren = {
  publicAboutRoute: publicAboutRoute,
  publicGuestbookRoute: publicGuestbookRoute,
  publicProfileRoute: publicProfileRoute,
  publicStatsRoute: publicStatsRoute,
  publicUsesRoute: publicUsesRoute,
  publicIndexRoute: publicIndexRoute,
  publicBlogArticleIdRoute: publicBlogArticleIdRoute,
  publicBookmarksBookmarkIdRoute: publicBookmarksBookmarkIdRoute,
  publicProjectsProjectIdRoute: publicProjectsProjectIdRoute,
  publicSnippetsSnippetIdRoute: publicSnippetsSnippetIdRoute,
  publicBlogIndexRoute: publicBlogIndexRoute,
  publicBookmarksIndexRoute: publicBookmarksIndexRoute,
  publicProjectsIndexRoute: publicProjectsIndexRoute,
  publicSnippetsIndexRoute: publicSnippetsIndexRoute,
};

const publicLayoutRouteWithChildren = publicLayoutRoute._addFileChildren(
  publicLayoutRouteChildren,
);

interface DashboardLayoutRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute;
  DashboardBlogCreateRoute: typeof DashboardBlogCreateRoute;
  DashboardExperiencesCreateRoute: typeof DashboardExperiencesCreateRoute;
  DashboardProjectsCreateRoute: typeof DashboardProjectsCreateRoute;
  DashboardSnippetsCreateRoute: typeof DashboardSnippetsCreateRoute;
  DashboardBlogIndexRoute: typeof DashboardBlogIndexRoute;
  DashboardExperiencesIndexRoute: typeof DashboardExperiencesIndexRoute;
  DashboardProjectsIndexRoute: typeof DashboardProjectsIndexRoute;
  DashboardSnippetsIndexRoute: typeof DashboardSnippetsIndexRoute;
  DashboardUsersIndexRoute: typeof DashboardUsersIndexRoute;
  DashboardBlogArticleIdEditRoute: typeof DashboardBlogArticleIdEditRoute;
  DashboardExperiencesExperienceIdEditRoute: typeof DashboardExperiencesExperienceIdEditRoute;
  DashboardProjectsProjectIdEditRoute: typeof DashboardProjectsProjectIdEditRoute;
  DashboardSnippetsSnippetIdEditRoute: typeof DashboardSnippetsSnippetIdEditRoute;
}

const DashboardLayoutRouteChildren: DashboardLayoutRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardBlogCreateRoute: DashboardBlogCreateRoute,
  DashboardExperiencesCreateRoute: DashboardExperiencesCreateRoute,
  DashboardProjectsCreateRoute: DashboardProjectsCreateRoute,
  DashboardSnippetsCreateRoute: DashboardSnippetsCreateRoute,
  DashboardBlogIndexRoute: DashboardBlogIndexRoute,
  DashboardExperiencesIndexRoute: DashboardExperiencesIndexRoute,
  DashboardProjectsIndexRoute: DashboardProjectsIndexRoute,
  DashboardSnippetsIndexRoute: DashboardSnippetsIndexRoute,
  DashboardUsersIndexRoute: DashboardUsersIndexRoute,
  DashboardBlogArticleIdEditRoute: DashboardBlogArticleIdEditRoute,
  DashboardExperiencesExperienceIdEditRoute:
    DashboardExperiencesExperienceIdEditRoute,
  DashboardProjectsProjectIdEditRoute: DashboardProjectsProjectIdEditRoute,
  DashboardSnippetsSnippetIdEditRoute: DashboardSnippetsSnippetIdEditRoute,
};

const DashboardLayoutRouteWithChildren = DashboardLayoutRoute._addFileChildren(
  DashboardLayoutRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  authLayoutRoute: authLayoutRouteWithChildren,
  publicLayoutRoute: publicLayoutRouteWithChildren,
  DashboardLayoutRoute: DashboardLayoutRouteWithChildren,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiTrpcSplatRoute: ApiTrpcSplatRoute,
  ApiChatIndexRoute: ApiChatIndexRoute,
  ApiContactIndexRoute: ApiContactIndexRoute,
  ApiStatsGithubActivityRoute: ApiStatsGithubActivityRoute,
  ApiStatsGithubIndexRoute: ApiStatsGithubIndexRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

import type { getRouter } from "./router.tsx";
import type { startInstance } from "./start.tsx";
declare module "@tanstack/react-start" {
  interface Register {
    ssr: true;
    router: Awaited<ReturnType<typeof getRouter>>;
    config: Awaited<ReturnType<typeof startInstance.getOptions>>;
  }
}
